import { <% if (fileRouter) { %>createFileRoute<% } else { %>createRoute<% } %>, useRouter } from '@tanstack/react-router'
import { createServerFn } from "@tanstack/react-start";
import { prisma } from '../db'
<% if (codeRouter) { %>
import { useState, useEffect } from 'react'
import type { RootRoute } from '@tanstack/react-router'
<% } %>

const createUser = createServerFn({
  method: 'POST',
})
  .validator((userData: { name: string; email: string }) => userData)
  .handler(async ({ data }) => {
    return await prisma.user.create({
      data,
    })
  })

const getUsers = createServerFn({
  method: 'GET',
}).handler(async () => {
  return await prisma.user.findMany({
    orderBy: { createdAt: 'desc' },
  })
})

<% if (fileRouter) { %>
export const Route = createFileRoute('/demo/prisma')({
  component: DemoPrisma,
  loader: async () => await getUsers(),
})
<% } %>

function DemoPrisma() {
  const router = useRouter()
  <% if (fileRouter) { %>
  const users = Route.useLoaderData()
  <% } else { %>
  const [users, setUsers] = useState<any[]>([])
  const [loading, setLoading] = useState(false)

  const loadUsers = async () => {
    try {
      const data = await getUsers()
      setUsers(data)
    } catch (error) {
      console.error('Failed to load users:', error)
    }
  }

  useEffect(() => {
    loadUsers()
  }, [])
  <% } %>

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    const formData = new FormData(e.target as HTMLFormElement)
    const name = formData.get('name') as string
    const email = formData.get('email') as string
    
    if (!name || !email) return

    try {
      await createUser({ data: { name, email } })
      <% if (fileRouter) { %>
      router.invalidate()
      <% } else { %>
      await loadUsers()
      <% } %>
      ;(e.target as HTMLFormElement).reset()
    } catch (error) {
      console.error('Failed to create user:', error)
    }
  }

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-6">Prisma Demo</h1>
      
      <div className="mb-8">
        <h2 className="text-xl font-semibold mb-4">Add New User</h2>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label htmlFor="name" className="block text-sm font-medium text-gray-700">
              Name
            </label>
            <input
              type="text"
              id="name"
              name="name"
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
              required
            />
          </div>
          <div>
            <label htmlFor="email" className="block text-sm font-medium text-gray-700">
              Email
            </label>
            <input
              type="email"
              id="email"
              name="email"
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
              required
            />
          </div>
          <button
            type="submit"
            className="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
          >
            Create User
          </button>
        </form>
      </div>

      <div>
        <h2 className="text-xl font-semibold mb-4">Users</h2>
        <div className="bg-white shadow overflow-hidden sm:rounded-md">
          <ul role="list" className="divide-y divide-gray-200">
            {users.map((user) => (
              <li key={user.id} className="px-6 py-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-900">{user.name}</p>
                    <p className="text-sm text-gray-500">{user.email}</p>
                  </div>
                  <div className="text-sm text-gray-500">
                    {new Date(user.createdAt).toLocaleDateString()}
                  </div>
                </div>
              </li>
            ))}
            {users.length === 0 && (
              <li className="px-6 py-4 text-sm text-gray-500">
                No users found. Create one above!
              </li>
            )}
          </ul>
        </div>
      </div>

      <div className="mt-8 p-4 bg-gray-50 rounded-lg">
        <h3 className="text-lg font-medium mb-2">Database: <%= addOnOption.prisma.database %></h3>
        <p className="text-sm text-gray-600">
          This demo shows basic CRUD operations using Prisma ORM with <%= addOnOption.prisma.database === 'postgres' ? 'PostgreSQL' : addOnOption.prisma.database === 'mysql' ? 'MySQL' : 'SQLite' %>.
        </p>
        <div className="mt-4 space-y-2 text-sm">
          <p><strong>Setup Instructions:</strong></p>
          <ol className="list-decimal list-inside space-y-1 text-gray-600">
            <li>Configure your DATABASE_URL in .env.local</li>
            <li>Run: <code className="bg-gray-200 px-1 rounded">npx prisma generate</code></li>
            <li>Run: <code className="bg-gray-200 px-1 rounded">npx prisma db push</code></li>
            <li>Optional: <code className="bg-gray-200 px-1 rounded">npx prisma studio</code></li>
          </ol>
        </div>
      </div>
    </div>
  )
}

<% if (codeRouter) { %>
export default (parentRoute: RootRoute) => createRoute({
  path: '/demo/prisma',
  component: DemoPrisma,
  getParentRoute: () => parentRoute,
})
<% } %>