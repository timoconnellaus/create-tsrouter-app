{
  "files": {
    ".cta.json": "{\n  \"addOns\": true,\n  \"git\": true,\n  \"mode\": \"file-router\",\n  \"packageManager\": \"npm\",\n  \"projectName\": \"TEST\",\n  \"tailwind\": false,\n  \"typescript\": false,\n  \"variableValues\": {},\n  \"version\": 1,\n  \"framework\": \"react-cra\",\n  \"chosenAddOns\": [\n    \"form\"\n  ]\n}",
    ".gitignore": "node_modules\n.DS_Store\ndist\ndist-ssr\n*.local\ncount.txt\n.env\n.nitro\n.tanstack\n",
    "/.vscode/settings.json": "{\n  \"files.watcherExclude\": {\n    \"**/routeTree.gen.ts\": true\n  },\n  \"search.exclude\": {\n    \"**/routeTree.gen.ts\": true\n  },\n  \"files.readonlyInclude\": {\n    \"**/routeTree.gen.ts\": true\n  }\n}\n",
    "/public/manifest.json": "{\n  \"short_name\": \"TanStack App\",\n  \"name\": \"Create TanStack App Sample\",\n  \"icons\": [\n    {\n      \"src\": \"favicon.ico\",\n      \"sizes\": \"64x64 32x32 24x24 16x16\",\n      \"type\": \"image/x-icon\"\n    },\n    {\n      \"src\": \"logo192.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"192x192\"\n    },\n    {\n      \"src\": \"logo512.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"512x512\"\n    }\n  ],\n  \"start_url\": \".\",\n  \"display\": \"standalone\",\n  \"theme_color\": \"#000000\",\n  \"background_color\": \"#ffffff\"\n}\n",
    "/public/robots.txt": "# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n",
    "/src/App.css": ".App {\n  text-align: center;\n}\n\n.App-logo {\n  height: 40vmin;\n  pointer-events: none;\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  .App-logo {\n    animation: App-logo-spin infinite 20s linear;\n  }\n}\n\n.App-header {\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n}\n\n.App-link {\n  color: #61dafb;\n}\n\n@keyframes App-logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n",
    "/src/components/Header.jsx": "import { Link } from '@tanstack/react-router'\n\nexport default function Header() {\n  return (\n    <header className=\"p-2 flex gap-2 bg-white text-black justify-between\">\n      <nav className=\"flex flex-row\">\n        <div className=\"px-2 font-bold\">\n          <Link to=\"/\">Home</Link>\n        </div>\n\n        <div className=\"px-2 font-bold\">\n          <Link to=\"/demo/form/simple\">Simple Form</Link>\n        </div>\n\n        <div className=\"px-2 font-bold\">\n          <Link to=\"/demo/form/address\">Address Form</Link>\n        </div>\n      </nav>\n    </header>\n  )\n}\n",
    "/src/components/demo.FormComponents.jsx": "import { useStore } from '@tanstack/react-form'\n\nimport { useFieldContext, useFormContext } from '../hooks/demo.form-context'\n\nexport function SubscribeButton({ label }: { label: string }) {\n  const form = useFormContext()\n  return (\n    <form.Subscribe selector={(state) => state.isSubmitting}>\n      {(isSubmitting) => (\n        <button\n          type=\"submit\"\n          disabled={isSubmitting}\n          className=\"px-6 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition-colors disabled:opacity-50\"\n        >\n          {label}\n        </button>\n      )}\n    </form.Subscribe>\n  )\n}\n\nfunction ErrorMessages({\n  errors,\n}: {\n  errors: Array<string | { message: string }>\n}) {\n  return (\n    <>\n      {errors.map((error) => (\n        <div\n          key={typeof error === 'string' ? error : error.message}\n          className=\"text-red-500 mt-1 font-bold\"\n        >\n          {typeof error === 'string' ? error : error.message}\n        </div>\n      ))}\n    </>\n  )\n}\n\nexport function TextField({\n  label,\n  placeholder,\n}: {\n  label: string\n  placeholder?: string\n}) {\n  const field = useFieldContext<string>()\n  const errors = useStore(field.store, (state) => state.meta.errors)\n\n  return (\n    <div>\n      <label htmlFor={label} className=\"block font-bold mb-1 text-xl\">\n        {label}\n        <input\n          value={field.state.value}\n          placeholder={placeholder}\n          onBlur={field.handleBlur}\n          onChange={(e) => field.handleChange(e.target.value)}\n          className=\"w-full px-4 py-2 rounded-md border border-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n        />\n      </label>\n      {field.state.meta.isTouched && <ErrorMessages errors={errors} />}\n    </div>\n  )\n}\n\nexport function TextArea({\n  label,\n  rows = 3,\n}: {\n  label: string\n  rows?: number\n}) {\n  const field = useFieldContext<string>()\n  const errors = useStore(field.store, (state) => state.meta.errors)\n\n  return (\n    <div>\n      <label htmlFor={label} className=\"block font-bold mb-1 text-xl\">\n        {label}\n        <textarea\n          value={field.state.value}\n          onBlur={field.handleBlur}\n          rows={rows}\n          onChange={(e) => field.handleChange(e.target.value)}\n          className=\"w-full px-4 py-2 rounded-md border border-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n        />\n      </label>\n      {field.state.meta.isTouched && <ErrorMessages errors={errors} />}\n    </div>\n  )\n}\n\nexport function Select({\n  label,\n  values,\n}: {\n  label: string\n  values: Array<{ label: string; value: string }>\n  placeholder?: string\n}) {\n  const field = useFieldContext<string>()\n  const errors = useStore(field.store, (state) => state.meta.errors)\n\n  return (\n    <div>\n      <label htmlFor={label} className=\"block font-bold mb-1 text-xl\">\n        {label}\n      </label>\n      <select\n        name={field.name}\n        value={field.state.value}\n        onBlur={field.handleBlur}\n        onChange={(e) => field.handleChange(e.target.value)}\n        className=\"w-full px-4 py-2 rounded-md border border-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n      >\n        {values.map((value) => (\n          <option key={value.value} value={value.value}>\n            {value.label}\n          </option>\n        ))}\n      </select>\n      {field.state.meta.isTouched && <ErrorMessages errors={errors} />}\n    </div>\n  )\n}\n",
    "/src/hooks/demo.form-context.js": "import { createFormHookContexts } from '@tanstack/react-form'\n\nexport const { fieldContext, useFieldContext, formContext, useFormContext } =\n  createFormHookContexts()\n",
    "/src/hooks/demo.form.js": "import { createFormHook } from '@tanstack/react-form'\n\nimport {\n  Select,\n  SubscribeButton,\n  TextArea,\n  TextField,\n} from '../components/demo.FormComponents'\nimport { fieldContext, formContext } from './demo.form-context'\n\nexport const { useAppForm } = createFormHook({\n  fieldComponents: {\n    TextField,\n    Select,\n    TextArea,\n  },\n  formComponents: {\n    SubscribeButton,\n  },\n  fieldContext,\n  formContext,\n})\n",
    "/src/main.jsx": "import { StrictMode } from 'react'\nimport ReactDOM from 'react-dom/client'\nimport { RouterProvider, createRouter } from '@tanstack/react-router'\n\n// Import the generated route tree\nimport { routeTree } from './routeTree.gen'\n\nimport './styles.css'\nimport reportWebVitals from './reportWebVitals.js'\n\n// Create a new router instance\nconst router = createRouter({\n  routeTree,\n  context: {},\n  defaultPreload: 'intent',\n  scrollRestoration: true,\n  defaultStructuralSharing: true,\n  defaultPreloadStaleTime: 0,\n})\n\n// Register the router instance for type safety\ndeclare module '@tanstack/react-router' {\n  interface Register {\n    router: typeof router\n  }\n}\n\n// Render the app\nconst rootElement = document.getElementById('app')\nif (rootElement && !rootElement.innerHTML) {\n  const root = ReactDOM.createRoot(rootElement)\n  root.render(\n    <StrictMode>\n      <RouterProvider router={router} />\n    </StrictMode>,\n  )\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n",
    "/src/reportWebVitals.js": "const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ onCLS, onINP, onFCP, onLCP, onTTFB }) => {\n      onCLS(onPerfEntry)\n      onINP(onPerfEntry)\n      onFCP(onPerfEntry)\n      onLCP(onPerfEntry)\n      onTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n",
    "/src/routes/__root.jsx": "import { Outlet, createRootRoute } from '@tanstack/react-router'\nimport { TanStackRouterDevtoolsPanel } from '@tanstack/react-router-devtools'\nimport { TanstackDevtools } from '@tanstack/react-devtools'\n\nimport Header from '../components/Header'\n\nexport const Route = createRootRoute({\n  component: () => (\n    <>\n      <Header />\n      <Outlet />\n      <TanstackDevtools\n        config={{\n          position: 'bottom-left',\n        }}\n        plugins={[\n          {\n            name: 'Tanstack Router',\n            render: <TanStackRouterDevtoolsPanel />,\n          },\n        ]}\n      />\n    </>\n  ),\n})\n",
    "/src/routes/demo.form.address.jsx": "import { createFileRoute } from '@tanstack/react-router'\n\nimport { useAppForm } from '../hooks/demo.form'\n\nexport const Route = createFileRoute('/demo/form')({\n  component: AddressForm,\n})\n\nfunction AddressForm() {\n  const form = useAppForm({\n    defaultValues: {\n      fullName: '',\n      email: '',\n      address: {\n        street: '',\n        city: '',\n        state: '',\n        zipCode: '',\n        country: '',\n      },\n      phone: '',\n    },\n    validators: {\n      onBlur: ({ value }) => {\n        const errors = {\n          fields: {},\n        } as {\n          fields: Record<string, string>\n        }\n        if (value.fullName.trim().length === 0) {\n          errors.fields.fullName = 'Full name is required'\n        }\n        return errors\n      },\n    },\n    onSubmit: ({ value }) => {\n      console.log(value)\n      // Show success message\n      alert('Form submitted successfully!')\n    },\n  })\n\n  return (\n    <div\n      className=\"flex items-center justify-center min-h-screen bg-gradient-to-br from-purple-100 to-blue-100 p-4 text-white\"\n      style={{\n        backgroundImage:\n          'radial-gradient(50% 50% at 5% 40%, #f4a460 0%, #8b4513 70%, #1a0f0a 100%)',\n      }}\n    >\n      <div className=\"w-full max-w-2xl p-8 rounded-xl backdrop-blur-md bg-black/50 shadow-xl border-8 border-black/10\">\n        <form\n          onSubmit={(e) => {\n            e.preventDefault()\n            e.stopPropagation()\n            form.handleSubmit()\n          }}\n          className=\"space-y-6\"\n        >\n          <form.AppField name=\"fullName\">\n            {(field) => <field.TextField label=\"Full Name\" />}\n          </form.AppField>\n\n          <form.AppField\n            name=\"email\"\n            validators={{\n              onBlur: ({ value }) => {\n                if (!value || value.trim().length === 0) {\n                  return 'Email is required'\n                }\n                if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(value)) {\n                  return 'Invalid email address'\n                }\n                return undefined\n              },\n            }}\n          >\n            {(field) => <field.TextField label=\"Email\" />}\n          </form.AppField>\n\n          <form.AppField\n            name=\"address.street\"\n            validators={{\n              onBlur: ({ value }) => {\n                if (!value || value.trim().length === 0) {\n                  return 'Street address is required'\n                }\n                return undefined\n              },\n            }}\n          >\n            {(field) => <field.TextField label=\"Street Address\" />}\n          </form.AppField>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <form.AppField\n              name=\"address.city\"\n              validators={{\n                onBlur: ({ value }) => {\n                  if (!value || value.trim().length === 0) {\n                    return 'City is required'\n                  }\n                  return undefined\n                },\n              }}\n            >\n              {(field) => <field.TextField label=\"City\" />}\n            </form.AppField>\n            <form.AppField\n              name=\"address.state\"\n              validators={{\n                onBlur: ({ value }) => {\n                  if (!value || value.trim().length === 0) {\n                    return 'State is required'\n                  }\n                  return undefined\n                },\n              }}\n            >\n              {(field) => <field.TextField label=\"State\" />}\n            </form.AppField>\n            <form.AppField\n              name=\"address.zipCode\"\n              validators={{\n                onBlur: ({ value }) => {\n                  if (!value || value.trim().length === 0) {\n                    return 'Zip code is required'\n                  }\n                  if (!/^\\d{5}(-\\d{4})?$/.test(value)) {\n                    return 'Invalid zip code format'\n                  }\n                  return undefined\n                },\n              }}\n            >\n              {(field) => <field.TextField label=\"Zip Code\" />}\n            </form.AppField>\n          </div>\n\n          <form.AppField\n            name=\"address.country\"\n            validators={{\n              onBlur: ({ value }) => {\n                if (!value || value.trim().length === 0) {\n                  return 'Country is required'\n                }\n                return undefined\n              },\n            }}\n          >\n            {(field) => (\n              <field.Select\n                label=\"Country\"\n                values={[\n                  { label: 'United States', value: 'US' },\n                  { label: 'Canada', value: 'CA' },\n                  { label: 'United Kingdom', value: 'UK' },\n                  { label: 'Australia', value: 'AU' },\n                  { label: 'Germany', value: 'DE' },\n                  { label: 'France', value: 'FR' },\n                  { label: 'Japan', value: 'JP' },\n                ]}\n                placeholder=\"Select a country\"\n              />\n            )}\n          </form.AppField>\n\n          <form.AppField\n            name=\"phone\"\n            validators={{\n              onBlur: ({ value }) => {\n                if (!value || value.trim().length === 0) {\n                  return 'Phone number is required'\n                }\n                if (\n                  !/^(\\+\\d{1,3})?\\s?\\(?\\d{3}\\)?[\\s.-]?\\d{3}[\\s.-]?\\d{4}$/.test(\n                    value,\n                  )\n                ) {\n                  return 'Invalid phone number format'\n                }\n                return undefined\n              },\n            }}\n          >\n            {(field) => (\n              <field.TextField label=\"Phone\" placeholder=\"123-456-7890\" />\n            )}\n          </form.AppField>\n\n          <div className=\"flex justify-end\">\n            <form.AppForm>\n              <form.SubscribeButton label=\"Submit\" />\n            </form.AppForm>\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n}\n",
    "/src/routes/demo.form.simple.jsx": "import { createFileRoute } from '@tanstack/react-router'\nimport { z } from 'zod'\n\nimport { useAppForm } from '../hooks/demo.form'\n\nexport const Route = createFileRoute('/demo/form')({\n  component: SimpleForm,\n})\n\nconst schema = z.object({\n  title: z.string().min(1, 'Title is required'),\n  description: z.string().min(1, 'Description is required'),\n})\n\nfunction SimpleForm() {\n  const form = useAppForm({\n    defaultValues: {\n      title: '',\n      description: '',\n    },\n    validators: {\n      onBlur: schema,\n    },\n    onSubmit: ({ value }) => {\n      console.log(value)\n      // Show success message\n      alert('Form submitted successfully!')\n    },\n  })\n\n  return (\n    <div\n      className=\"flex items-center justify-center min-h-screen bg-gradient-to-br from-purple-100 to-blue-100 p-4 text-white\"\n      style={{\n        backgroundImage:\n          'radial-gradient(50% 50% at 5% 40%, #add8e6 0%, #0000ff 70%, #00008b 100%)',\n      }}\n    >\n      <div className=\"w-full max-w-2xl p-8 rounded-xl backdrop-blur-md bg-black/50 shadow-xl border-8 border-black/10\">\n        <form\n          onSubmit={(e) => {\n            e.preventDefault()\n            e.stopPropagation()\n            form.handleSubmit()\n          }}\n          className=\"space-y-6\"\n        >\n          <form.AppField name=\"title\">\n            {(field) => <field.TextField label=\"Title\" />}\n          </form.AppField>\n\n          <form.AppField name=\"description\">\n            {(field) => <field.TextArea label=\"Description\" />}\n          </form.AppField>\n\n          <div className=\"flex justify-end\">\n            <form.AppForm>\n              <form.SubscribeButton label=\"Submit\" />\n            </form.AppForm>\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n}\n",
    "/src/routes/index.jsx": "import { createFileRoute } from '@tanstack/react-router'\nimport logo from '../logo.svg'\nimport '../App.css'\n\nexport const Route = createFileRoute('/')({\n  component: App,\n})\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/routes/index.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n        <a\n          className=\"App-link\"\n          href=\"https://tanstack.com\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn TanStack\n        </a>\n      </header>\n    </div>\n  )\n}\n",
    "/src/styles.css": "\nbody {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\n    \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\",\n    monospace;\n}\n",
    "README.md": "Welcome to your new TanStack app! \n\n# Getting Started\n\nTo run this application:\n\n```bash\nnpm install\nnpm run start\n```\n\n# Building For Production\n\nTo build this application for production:\n\n```bash\nnpm run build\n```\n\n## Testing\n\nThis project uses [Vitest](https://vitest.dev/) for testing. You can run the tests with:\n\n```bash\nnpm run test\n```\n\n## Styling\n\nThis project uses CSS for styling.\n\n\n\n\n## Routing\nThis project uses [TanStack Router](https://tanstack.com/router). The initial setup is a file based router. Which means that the routes are managed as files in `src/routes`.\n\n### Adding A Route\n\nTo add a new route to your application just add another a new file in the `./src/routes` directory.\n\nTanStack will automatically generate the content of the route file for you.\n\nNow that you have two routes you can use a `Link` component to navigate between them.\n\n### Adding Links\n\nTo use SPA (Single Page Application) navigation you will need to import the `Link` component from `@tanstack/react-router`.\n\n```tsx\nimport { Link } from \"@tanstack/react-router\";\n```\n\nThen anywhere in your JSX you can use it like so:\n\n```tsx\n<Link to=\"/about\">About</Link>\n```\n\nThis will create a link that will navigate to the `/about` route.\n\nMore information on the `Link` component can be found in the [Link documentation](https://tanstack.com/router/v1/docs/framework/react/api/router/linkComponent).\n\n### Using A Layout\n\nIn the File Based Routing setup the layout is located in `src/routes/__root.tsx`. Anything you add to the root route will appear in all the routes. The route content will appear in the JSX where you use the `<Outlet />` component.\n\nHere is an example layout that includes a header:\n\n```tsx\nimport { Outlet, createRootRoute } from '@tanstack/react-router'\nimport { TanStackRouterDevtools } from '@tanstack/react-router-devtools'\n\nimport { Link } from \"@tanstack/react-router\";\n\nexport const Route = createRootRoute({\n  component: () => (\n    <>\n      <header>\n        <nav>\n          <Link to=\"/\">Home</Link>\n          <Link to=\"/about\">About</Link>\n        </nav>\n      </header>\n      <Outlet />\n      <TanStackRouterDevtools />\n    </>\n  ),\n})\n```\n\nThe `<TanStackRouterDevtools />` component is not required so you can remove it if you don't want it in your layout.\n\nMore information on layouts can be found in the [Layouts documentation](https://tanstack.com/router/latest/docs/framework/react/guide/routing-concepts#layouts).\n\n\n## Data Fetching\n\nThere are multiple ways to fetch data in your application. You can use TanStack Query to fetch data from a server. But you can also use the `loader` functionality built into TanStack Router to load the data for a route before it's rendered.\n\nFor example:\n\n```tsx\nconst peopleRoute = createRoute({\n  getParentRoute: () => rootRoute,\n  path: \"/people\",\n  loader: async () => {\n    const response = await fetch(\"https://swapi.dev/api/people\");\n    return response.json();\n  },\n  component: () => {\n    const data = peopleRoute.useLoaderData();\n    return (\n      <ul>\n        {data.results.map((person) => (\n          <li key={person.name}>{person.name}</li>\n        ))}\n      </ul>\n    );\n  },\n});\n```\n\nLoaders simplify your data fetching logic dramatically. Check out more information in the [Loader documentation](https://tanstack.com/router/latest/docs/framework/react/guide/data-loading#loader-parameters).\n\n### React-Query\n\nReact-Query is an excellent addition or alternative to route loading and integrating it into you application is a breeze.\n\nFirst add your dependencies:\n\n```bash\nnpm install @tanstack/react-query @tanstack/react-query-devtools\n```\n\nNext we'll need to create a query client and provider. We recommend putting those in `main.jsx`.\n\n```tsx\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\n\n// ...\n\nconst queryClient = new QueryClient();\n\n// ...\n\nif (!rootElement.innerHTML) {\n  const root = ReactDOM.createRoot(rootElement);\n\n  root.render(\n    <QueryClientProvider client={queryClient}>\n      <RouterProvider router={router} />\n    </QueryClientProvider>\n  );\n}\n```\n\nYou can also add TanStack Query Devtools to the root route (optional).\n\n```tsx\nimport { ReactQueryDevtools } from \"@tanstack/react-query-devtools\";\n\nconst rootRoute = createRootRoute({\n  component: () => (\n    <>\n      <Outlet />\n      <ReactQueryDevtools buttonPosition=\"top-right\" />\n      <TanStackRouterDevtools />\n    </>\n  ),\n});\n```\n\nNow you can use `useQuery` to fetch your data.\n\n```tsx\nimport { useQuery } from \"@tanstack/react-query\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const { data } = useQuery({\n    queryKey: [\"people\"],\n    queryFn: () =>\n      fetch(\"https://swapi.dev/api/people\")\n        .then((res) => res.json())\n        .then((data) => data.results),\n    initialData: [],\n  });\n\n  return (\n    <div>\n      <ul>\n        {data.map((person) => (\n          <li key={person.name}>{person.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n```\n\nYou can find out everything you need to know on how to use React-Query in the [React-Query documentation](https://tanstack.com/query/latest/docs/framework/react/overview).\n\n## State Management\n\nAnother common requirement for React applications is state management. There are many options for state management in React. TanStack Store provides a great starting point for your project.\n\nFirst you need to add TanStack Store as a dependency:\n\n```bash\nnpm install @tanstack/store\n```\n\nNow let's create a simple counter in the `src/App.jsx` file as a demonstration.\n\n```tsx\nimport { useStore } from \"@tanstack/react-store\";\nimport { Store } from \"@tanstack/store\";\nimport \"./App.css\";\n\nconst countStore = new Store(0);\n\nfunction App() {\n  const count = useStore(countStore);\n  return (\n    <div>\n      <button onClick={() => countStore.setState((n) => n + 1)}>\n        Increment - {count}\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n```\n\nOne of the many nice features of TanStack Store is the ability to derive state from other state. That derived state will update when the base state updates.\n\nLet's check this out by doubling the count using derived state.\n\n```tsx\nimport { useStore } from \"@tanstack/react-store\";\nimport { Store, Derived } from \"@tanstack/store\";\nimport \"./App.css\";\n\nconst countStore = new Store(0);\n\nconst doubledStore = new Derived({\n  fn: () => countStore.state * 2,\n  deps: [countStore],\n});\ndoubledStore.mount();\n\nfunction App() {\n  const count = useStore(countStore);\n  const doubledCount = useStore(doubledStore);\n\n  return (\n    <div>\n      <button onClick={() => countStore.setState((n) => n + 1)}>\n        Increment - {count}\n      </button>\n      <div>Doubled - {doubledCount}</div>\n    </div>\n  );\n}\n\nexport default App;\n```\n\nWe use the `Derived` class to create a new store that is derived from another store. The `Derived` class has a `mount` method that will start the derived store updating.\n\nOnce we've created the derived store we can use it in the `App` component just like we would any other store using the `useStore` hook.\n\nYou can find out everything you need to know on how to use TanStack Store in the [TanStack Store documentation](https://tanstack.com/store/latest).\n\n# Demo files\n\nFiles prefixed with `demo` can be safely deleted. They are there to provide a starting point for you to play around with the features you've installed.\n\n# Learn More\n\nYou can learn more about all of the offerings from TanStack in the [TanStack documentation](https://tanstack.com).\n",
    "index.html": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"icon\" href=\"/favicon.ico\" />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <meta\n      name=\"description\"\n      content=\"Web site created using create-tsrouter-app\"\n    />\n    <link rel=\"apple-touch-icon\" href=\"/logo192.png\" />\n    <link rel=\"manifest\" href=\"/manifest.json\" />\n    <title>Create TanStack App - TEST</title>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <script type=\"module\" src=\"/src/main.jsx\"></script>\n  </body>\n</html>\n",
    "package.json": "{\n  \"name\": \"TEST\",\n  \"private\": true,\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite --port 3000\",\n    \"start\": \"vite --port 3000\",\n    \"build\": \"vite build && tsc\",\n    \"serve\": \"vite preview\",\n    \"test\": \"vitest run\"\n  },\n  \"dependencies\": {\n    \"@tanstack/react-devtools\": \"^0.2.2\",\n    \"@tanstack/react-form\": \"^1.0.0\",\n    \"@tanstack/react-router\": \"^1.130.2\",\n    \"@tanstack/react-router-devtools\": \"^1.131.5\",\n    \"@tanstack/router-plugin\": \"^1.121.2\",\n    \"react\": \"^19.0.0\",\n    \"react-dom\": \"^19.0.0\",\n    \"zod\": \"^3.24.2\"\n  },\n  \"devDependencies\": {\n    \"@testing-library/dom\": \"^10.4.0\",\n    \"@testing-library/react\": \"^16.2.0\",\n    \"@types/react\": \"^19.0.8\",\n    \"@types/react-dom\": \"^19.0.3\",\n    \"@vitejs/plugin-react\": \"^4.3.4\",\n    \"jsdom\": \"^26.0.0\",\n    \"typescript\": \"^5.7.2\",\n    \"vite\": \"^6.3.5\",\n    \"vitest\": \"^3.0.5\",\n    \"web-vitals\": \"^4.2.4\"\n  }\n}",
    "vite.config.js": "import { defineConfig } from 'vite'\nimport viteReact from '@vitejs/plugin-react'\nimport { TanStackRouterVite } from '@tanstack/router-plugin/vite'\nimport { resolve } from 'node:path'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [TanStackRouterVite({ autoCodeSplitting: true }), viteReact()],\n  test: {\n    globals: true,\n    environment: 'jsdom',\n  },\n  resolve: {\n    alias: {\n      '@': resolve(__dirname, './src'),\n    },\n  },\n})\n"
  },
  "commands": [
    "git init",
    "npm install"
  ]
}